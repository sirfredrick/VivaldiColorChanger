; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0CED4BED-BBDC-4957-8694-803498B0C3B0}
AppName=Vivaldi Color Changer Service
AppVersion=2.1.0
;AppVerName=Vivaldi Color Changer Service 2.1.0
AppPublisher=Sir Fredrick
AppPublisherURL=https://sirfredrick.vivaldi.net/
AppSupportURL=https://sirfredrick.vivaldi.net/
AppUpdatesURL=https://sirfredrick.vivaldi.net/
DefaultDirName={pf}\Vivaldi Color Changer Service
DefaultGroupName=Vivaldi Color Changer Service
LicenseFile=<Release Folder>\gpl-3.0.txt
OutputDir=<Release Folder>
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "<Release Folder>\ColorChangerService\ColorChangerService.exe"; DestDir: "{app}\ColorChangerService"; Flags: ignoreversion
Source: "<Release Folder>\unzip\unzip.exe"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "<Release Folder>\MoveDLLs\*"; DestDir: "{tmp}"; Flags: ignoreversion recursesubdirs
Source: "<Release Folder>\MoveVivaldiFiles\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
Source: "<Release Folder>\ColorChangerService\*"; DestDir: "{app}\ColorChangerService"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "<Release Folder>\Color Changer 2.1.0\Vivaldi\*"; DestDir: "{app}\Vivaldi"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\Vivaldi Color Changer Service"; Filename: "{app}\ColorChangerService\ColorChangerService.exe"
Name: "{group}\{cm:UninstallProgram,Vivaldi Color Changer Service}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\Vivaldi Color Changer Service"; Filename: "{app}\ColorChangerService\ColorChangerService.exe"; Tasks: desktopicon

[INI]
Filename: {app}\ColorChangerService\config.ini; Section: configKeys; Key: pubKey; String: " {code:GetPubKey} "
Filename: {app}\ColorChangerService\config.ini; Section: configKeys; Key: subKey; String: " {code:GetSubKey} "

[Run]
Filename: "{tmp}\unzip.exe"; Parameters: "SDK.zip"; Flags: runascurrentuser skipifsilent
Filename: "{tmp}\MoveDLLs.exe"; Parameters: """{app}\ColorChangerService\"; Flags: runascurrentuser skipifsilent
Filename: "{app}\ColorChangerService\ColorChangerService.exe"; Parameters: "install --localsystem --autostart"; Description: "{cm:LaunchProgram,Vivaldi Color Changer Service}"; Flags: runascurrentuser skipifsilent
Filename: "{app}\moveVivaldiFiles.exe"; Parameters: """{code:GetVivaldiPath}"""; Flags: runascurrentuser skipifsilent 

[UninstallRun]
Filename: "{app}\ColorChangerService\ColorChangerService.exe"; Parameters: "uninstall";

[UninstallDelete]
Type: files; Name: "{app}\ColorChangerService\GLedApi.dll"
Type: files; Name: "{app}\ColorChangerService\layout.ini"
Type: files; Name: "{app}\ColorChangerService\ycc.dll"
Type: files; Name: "{app}\ColorChangerService\config.ini"

[Code]

#include "dwinshs.iss"
var
AuthPage : TInputQueryWizardPage;

procedure InitializeWizard1();
begin
AuthPage := CreateInputQueryPage(wpWelcome,
    'Pubnub Info', 'Please enter your Pubnub Pub & Sub Keys.',
    '');
  AuthPage.Add('Pub Key:', False);
  AuthPage.Add('Sub Key:', False);
end;

function AuthForm_NextButtonClick(Page: TWizardPage): Boolean;
begin
  Result := True;
end;

function GetPubKey(Param: String): string;
begin
result := AuthPage.Values[0];
end;

function GetSubKey(Param: String): string;
begin
result := AuthPage.Values[1];
end;

var
  DownloadIndicator: TNewProgressBar;
  BackClicked: Boolean;
  Downloaded: Boolean;

procedure InitializeWizard2();
begin
  Downloaded := False;
  // Create the download progress indicator
  DownloadIndicator := TNewProgressBar.Create(PageFromId(wpReady));
  DownloadIndicator.Left := ScaleX(40);
  DownloadIndicator.Top := ScaleY(180);
  DownloadIndicator.Width := PageFromId(wpReady).SurfaceWidth - ScaleX(80);
  DownloadIndicator.Height:= ScaleY(20);
  DownloadIndicator.Min := 0;
  DownloadIndicator.Parent := PageFromId(wpReady).Surface;
end;

function OnRead(URL, Agent: AnsiString; Method: TReadMethod; Index, TotalSize, ReadSize,
  CurrentSize: {#BIG_INT}; var ReadStr: AnsiString): Boolean;
begin
  if Index = 0 then DownloadIndicator.Max := TotalSize;
  DownloadIndicator.Position := ReadSize; // Update the download progress indicator
  Result := True; // Continue to download
  Result := not BackClicked; // Determine whether download was cancelled
end;
var 
  VivaldiPage : TInputQueryWizardPage;
procedure InitializeWizard3();
begin
VivaldiPage := CreateInputQueryPage(wpWelcome,
    'Vivaldi Path', 'Please enter the path to you Vivaldi folder.',
    '');
  VivaldiPage.Add('Vivaldi Path:', False);
end;

function Vivaldi_NextButtonClick(Page: TWizardPage): Boolean;
begin
  Result := True;
end;

function GetVivaldiPath(Param: String): string;
begin
result := VivaldiPage.Values[0];
end;

procedure CurPageChanged(CurPageID: Integer);
var
  Response: AnsiString;
  Size: {#BIG_INT};
begin
  if (CurPageId = wpReady) and (not Downloaded) then
  begin
    // Allow to download
    BackClicked := False;
    // Initialize download progress indicator
    DownloadIndicator.Position := 0;
    // Disbale to continue before download completes
    WizardForm.NextButton.Enabled := False;
    // Enable to continue after download successfully, save the remote file automatically
    WizardForm.NextButton.Enabled :=
      DwinsHs_ReadRemoteURL('https://www.gigabyte.com/WebPage/332/images/B18.0206.1.zip', 'My_App', rmGet,
      Response, Size, ExpandConstant('{tmp}') + '\SDK.zip', @OnRead) = READ_OK;
    Downloaded := WizardForm.NextButton.Enabled;
  end;
end;

function BackButtonClick(CurPageID: Integer): Boolean;
begin
  // Stop to download
  BackClicked := True;
  Result := True;
  WizardForm.NextButton.Enabled := True;
end;

procedure InitializeWizard;
begin
  InitializeWizard1
  InitializeWizard2
  InitializeWizard3
end;


